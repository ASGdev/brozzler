/*
 * brozzler/js-templates/umbrabehavior.js.j2 - a library for umbra/brozzler behaviors
 *
 * Copyright (C) 2017 Internet Archive
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var umbraBehavior = {
    IDLE_TIMEOUT_SEC : 10,

    alreadyDone : [],
    idleSince : null,
    intervalId : null,
    actions : {{actions|json}},

    intervalFunc: function() {
        var didSomething = false;
        var somethingLeftBelow = false;
        var somethingLeftAbove = false;
        var actionsLength = this.actions.length;

        for (var k = 0; k < actionsLength; k++) {
            var selector = this.actions[k].selector;
            var action = this.actions[k].do ? this.actions[k].do : 'click';
            if (this.actions[k].limit && this.actions[k].alreadyDone && this.actions[k].alreadyDone.length >= this.actions[k].limit) {
                continue;
            }
            if (this.actions[k].limit && !(this.actions[k].alreadyDone)) {
                this.actions[k].alreadyDone = [];
            }

            var iframes = document.querySelectorAll("iframe");
            var documents = Array(iframes.length + 1);
            documents[0] = document;

            iframesLength = iframes.length;
            for (var i = 0; i < iframesLength; i++) {
                documents[i+1] = iframes[i].contentWindow.document;
            }

            documentsLength = documents.length;
            for (var j = 0; j < documentsLength; j++) {

                if (this.actions[k].limit && this.actions[k].alreadyDone && this.actions[k].alreadyDone.length >= this.actions[k].limit) {
                    break;
                }
                var doTargets = documents[j].querySelectorAll(selector);
                if (doTargets == []) {
                    continue;
                }

                doTargetsLength = doTargets.length;
                for ( var i = 0; i < doTargetsLength; i++) {
                    if (this.actions[k].limit && this.actions[k].alreadyDone && this.actions[k].alreadyDone.length >= this.actions[k].limit) {
                        break;
                    }
                    if (this.alreadyDone.indexOf(doTargets[i]) > -1) {
                        continue;
                    }
                    if (!this.isVisible(doTargets[i])) {
                        continue;
                    }

                    var where = this.aboveBelowOrOnScreen(doTargets[i]);
                    if (where == 0) {
                        this.doTarget(doTargets[i], action);
                        didSomething = true;
                        if (this.actions[k].alreadyDone) {
                            this.actions[k].alreadyDone.push(doTargets[i]);
                        }
                    } else if (where > 0) {
                        somethingLeftBelow = true;
                    } else if (where < 0) {
                        somethingLeftAbove = true;
                    }
                    if (didSomething) {
                        break; // break from doTargets loop, but not from documents loop
                    }
                }
            }

            if (!didSomething) {
                if (somethingLeftAbove) {
                    // console.log("scrolling UP because everything on this screen has been done but we missed something above");
                    window.scrollBy(0, -500);
                    this.idleSince = null;
                } else if (somethingLeftBelow) {
                    // console.log("scrolling because everything on this screen has been done but there's more below");
                    window.scrollBy(0, 200);
                    this.idleSince = null;
                } else if (window.scrollY + window.innerHeight < document.documentElement.scrollHeight) {
                    // console.log("scrolling because we're not to the bottom yet");
                    window.scrollBy(0, 200);
                    this.idleSince = null;
                }  else if (this.idleSince == null) {
                    this.idleSince = Date.now();
                }
            }

            if (!this.idleSince) {
                this.idleSince = Date.now();
            }
        }
    },

    start : function() {
        var that = this;
        this.intervalId = setInterval(function() {
            that.intervalFunc()
        }, 250);
    },

    isFinished : function() {
        if (this.idleSince != null) {
            var idleTimeMs = Date.now() - this.idleSince;
            if (idleTimeMs / 1000 > this.IDLE_TIMEOUT_SEC) {
                clearInterval(this.intervalId);
                return true;
            }
        }
        return false;
    },

    aboveBelowOrOnScreen : function(elem) {
        var eTop = elem.getBoundingClientRect().top;
        if (eTop < window.scrollY) {
            return -1; // above
        } else if (eTop > window.scrollY + window.innerHeight) {
            return 1; // below
        } else {
            return 0; // on screen
        }
    },

    isVisible : function(elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
    },

    doTarget : function(target, action) {
        // console.log("doing " + action + target.outerHTML);
        // do mouse over event on target
        // since some urls are requsted only on
        // this event - see
        // https://webarchive.jira.com/browse/AITFIVE-451
        var mouseOverEvent = document.createEvent("Events");
        mouseOverEvent.initEvent("mouseover", true, false);
        target.dispatchEvent(mouseOverEvent);

        if (action == "click") {
            target.click();
        } // add new do's here!

        this.alreadyDone.push(target);
        this.idleSince = null;
    },

// end umbraBehavior definition
};

// Called from outside of this script.
var umbraBehaviorFinished = function() {
    return umbraBehavior.isFinished();
};

umbraBehavior.start();
